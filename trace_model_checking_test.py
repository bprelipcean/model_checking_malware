#!/usr/bin/env python

from pyModelChecking import Kripke
from pyModelChecking.LTL import *

__author__ = "Bogdan Prelipcean"
__status__ = "Development"


def build_Kripke_from_trace(trace_file_path):
    S= []
    R = []
    L = {}
    current_state=0
    S_0 = [0]
    for line in open(trace_file_path):
        if current_state>0:
            S.append(current_state)
        if not L.has_key(current_state):
            L[current_state] = set([line.strip()])
            R.append((current_state, current_state+1))
            current_state += 1
    R.append((current_state, current_state))
#   print R

    return Kripke(S, S_0, R, L)


if __name__ == '__main__':
    kripke = build_Kripke_from_trace(sys.argv[1])
    print kripke
    #signature = A(F(U('kernel32.FindFirstFile',U('kernel32.FindNextFile', U('kernel32.GetDriveTypeA','GetLogicalDriveStrings')))))
    signature = A(F(U('kernel32.FindFirstFile','kernel32.FindNextFile')))
    result = modelcheck(kripke, signature)
    print result


